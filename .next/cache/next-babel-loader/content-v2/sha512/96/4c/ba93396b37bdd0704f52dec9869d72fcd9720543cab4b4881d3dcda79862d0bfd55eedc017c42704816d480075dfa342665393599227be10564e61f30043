{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\lihib\\\\Desktop\\\\nextproject\\\\pages\\\\[recipeId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport RecipeDetail from '../../components/recipes/RecipeDetail';\n\nfunction RecipeDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.recipeData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.recipeData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecipeDetail, {\n      image: props.recipeData.image,\n      title: props.recipeData.title,\n      description: props.recipeData.description,\n      ingredients: props.recipeData.ingredients,\n      directions: props.recipeData.directions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://bel:123bel@cluster0.girhn.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const recipesCollection = db.collection('recipes'); //'_id:1' : only includes the id of the object, no other values. fetching 'id' only for every object\n\n  const recipes = await recipesCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close(); //fallback: blocking/true --> Next.js will not respond with 404 page if it cant find the page immidiatly.\n\n  return {\n    fallback: 'blocking',\n    paths: recipes.map(recipe => ({\n      params: {\n        recipeId: recipe._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single recipe\n  const recipeId = context.params.recipeId;\n  const client = await MongoClient.connect('mongodb+srv://bel:123bel@cluster0.girhn.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const recipesCollection = db.collection('recipes');\n  const selectedRecipe = await recipesCollection.findOne({\n    _id: ObjectId(recipeId)\n  });\n  client.close();\n  return {\n    props: {\n      recipeData: {\n        id: selectedRecipe._id.toString(),\n        title: selectedRecipe.title,\n        description: selectedRecipe.description,\n        image: selectedRecipe.image,\n        ingredients: selectedRecipe.ingredients,\n        directions: selectedRecipe.directions\n      }\n    }\n  };\n}\nexport default RecipeDetails;","map":{"version":3,"sources":["C:/Users/lihib/Desktop/nextproject/pages/[recipeId]/index.js"],"names":["MongoClient","ObjectId","Fragment","Head","RecipeDetail","RecipeDetails","props","recipeData","title","description","image","ingredients","directions","getStaticPaths","client","connect","db","recipesCollection","collection","recipes","find","_id","toArray","close","fallback","paths","map","recipe","params","recipeId","toString","getStaticProps","context","selectedRecipe","findOne","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport { Fragment } from 'react';\r\nimport Head from 'next/head';\r\nimport RecipeDetail from '../../components/recipes/RecipeDetail';\r\n\r\nfunction RecipeDetails(props) {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{props.recipeData.title}</title>\r\n        <meta name='description' content={props.recipeData.description} />\r\n      </Head>\r\n      <RecipeDetail\r\n        image={props.recipeData.image}\r\n        title={props.recipeData.title}\r\n        description={props.recipeData.description}\r\n        ingredients={props.recipeData.ingredients}\r\n        directions={props.recipeData.directions}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://bel:123bel@cluster0.girhn.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'\r\n  );\r\n  const db = client.db();\r\n\r\n  const recipesCollection = db.collection('recipes');\r\n\r\n  //'_id:1' : only includes the id of the object, no other values. fetching 'id' only for every object\r\n  const recipes = await recipesCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n//fallback: blocking/true --> Next.js will not respond with 404 page if it cant find the page immidiatly.\r\n  return {\r\n    fallback: 'blocking',\r\n    paths: recipes.map((recipe) => ({\r\n      params: { recipeId: recipe._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // fetch data for a single recipe\r\n\r\n  const recipeId = context.params.recipeId;\r\n\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://bel:123bel@cluster0.girhn.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'\r\n  );\r\n  const db = client.db();\r\n\r\n  const recipesCollection = db.collection('recipes');\r\n\r\n  const selectedRecipe = await recipesCollection.findOne({\r\n    _id: ObjectId(recipeId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      recipeData: {\r\n        id: selectedRecipe._id.toString(),\r\n        title: selectedRecipe.title,\r\n        description: selectedRecipe.description,\r\n        image: selectedRecipe.image,\r\n        ingredients: selectedRecipe.ingredients,\r\n        directions: selectedRecipe.directions,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default RecipeDetails;"]},"metadata":{},"sourceType":"module"}